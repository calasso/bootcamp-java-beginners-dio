Anotações e comandos: Git & GitHub

Oficial: https://git-scm.com/

UNIX (Bash) ou  Windows (Shell / Git Bash)

 -*- ***** ------------ * ------------ ***** -*-  
Criando chave SSH (pública e outra privada):
  https://github.com/settings/keys [New SSH KEY]
  Dentro do terminal Bash, tem que criar a chave com o seguintes comandos:
  $ ssh-keygen -t ed25519 -C email@gmail.com (“ed25519” é o tipo de criptografia)
    *** Colocar o local onde a chave deve ser gerada [recomendado, não alterar] ***
    *** Colocar uma senha ***
  $ cd endereço/onde/foi/salvo
  $ ls [verificar os dois arquivos que foram gerados]
  $ cat id_ed25519.pub {Visualizar o conteudo/chave}
    *** Copiar a chave e voltar no git (https://github.com/settings/ssh/new) ***
    *** Add o titulo, cola a chave e insere a senha após clicar no botão [New SSH KEY]
  $ eval $(ssh-agent -s) {Start da chave para poder ser usada}
  $ ssh-add id_ed25519 {Entregando a chave privada “sem o .pub”}
    ***Colocar a senha***
    
  OBS: Quando for clonar um repositório, obrigatoriamente tem que ser pelo SSH

 -*- ***** ------------ * ------------ ***** -*-  

TOKEN de acesso pessoal:
	Gerar pelo site do git (https://github.com/settings/tokens) 
	Copiar e salvar em seus documentos, pq será solicitado toda vez que for fazer commit.

	OBS: Quando for clonar um repositório, obrigatoriamente tem que ser pelo HTTPS

 -*- ***** ------------ * ------------ ***** -*-  

SHA 1 - Algoritmo de encriptação (40 caracteres)
  - echo

 -*- ***** ------------ * ------------ ***** -*-  

Comandos UNIX BASH:
  cd  (Navegar entre pastas)
  dir  (Listar)
  mkdir  (Criar pasta)
  del  (Deletar arquivo)
  rmdir /S /Q  (Deletar pastas 
  cls [Ctrl+l]  (Limpar tela)
  [Tab]  (Auto completar)
  echo  (Printar na tela)
  echo hello > arquivo.txt  (Cria o arquivo e insere “hello”)

 -*- ***** ------------ * ------------ ***** -*-  

Comandos UNIX BASH:
  cd  (Navegar entre pastas)
  ls  (Listar)
  ls -a   (Listar pastas e arquivos ocultos)
  mkdir  (Criar pasta)
  rm  (Deletar arquivo)
  rm -rf  (Deletar pastas ("r" recursiva e "f" forçar)
  clear [Ctrl+l]  (Limpar tela)
  [Tab]  (Auto completar)
  sudo su  (Permissão de usuário)
  echo  (Printar na tela)
  echo hello > arquivo.txt  (Cria o arquivo e insere “hello”)
  pwd  (Mostra o caminho completo)
  mv  (Mover arquivos)

 -*- ***** ------------ * ------------ ***** -*-  

Comandos GIT:
  $ git config --global user.email "email@gmail.com"
  $ git config --global user.name Nome 
  $ git config –list (Para listar as configurações do git)
  $ git config --global --unset user.name (para limpar o nome inserido anteriormente)
  $ git init (Iniciar o repositório)
  $ git clone [caminho do repositório] (Para clonar repositórios)
  $ git add (mover arquivos)
  $ git add * (mover todos os arquivos)
  $ git add . (mover todos os arquivos)
  $ git restore –staged NOME-DO-ARQUIVO.TXT (serve para remover algo que foi usado no $git add)
  $ git remote add origin https://github.com/usuario/repositorio.git (adicionando a “origin” que é um apelido apra a URL)
  $ git remote -v (lista de repositórios remotos)
  $ git push origin master (“push” envia os commits para a “master”)

 -*- ***** ------------ * ------------ ***** -*-  

 Passos para COMMITAR:
  git checkout feature/NOME (para entrar na branch)
  git status
  git add .
  git reset PARA_REVOVER_ALGUM_ARQUIVO (caso precise)
  git commit -m "#feature/NOME - Mensagem que identifique o commit"
  *** git commit --amend --reset-author (Caso precise alterar o usuário)
  git status 
  git push origin feature/NOME ou master

REMOVER UNTRACKED FILES
  git clean -df [Remove todos untracked files]

REMOVER BRANCH (Forçando a remoção)
  git branch -D NOME-DA-BRANCH

MERGIAR BRANCHES
    *** A branch que deve ficar atualizada, tem que fazer o merge de dentro dela
  git checkout feature/PRINCIPAL (entra na que deve ficar mergiada com todas as tarefas)
  git pull origin feature/PRINCIPAL (atualizo)
  git merge feature/NOME
    *** Corrige os conflitos
  git add .
  git commit -m "#feature/PRINCIPAL - Merge fix"
  git status
  git push origin feature/PRINCIPAL
